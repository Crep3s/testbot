import logging
import asyncio
import nest_asyncio
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import config
import game_logic
import scheduler_tasks
from handlers import user_handlers, admin_handlers, general_handlers

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ä–µ–¥–∞–º–∏
# –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ä–µ–¥, –≥–¥–µ asyncio —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Jupyter –∏–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö)
# –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –Ω—É–∂–Ω–æ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

async def main():
    if not config.BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!")

    # --- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    app = ApplicationBuilder().token(config.BOT_TOKEN).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    # Conversation handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /season
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("season", user_handlers.season_entry)],
        states={
            user_handlers.SEASON_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_handlers.season_command)]
        },
        fallbacks=[]
    )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", user_handlers.start))
    app.add_handler(CommandHandler("profile", user_handlers.profile))
    app.add_handler(CommandHandler("inventory", user_handlers.inventory_command))
    app.add_handler(CommandHandler("join", user_handlers.join))
    app.add_handler(CommandHandler("leave", user_handlers.leave))
    app.add_handler(conv_handler)

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("addpoints", admin_handlers.modify_points))
    app.add_handler(CommandHandler("additem", admin_handlers.add_item))
    app.add_handler(CommandHandler("send", admin_handlers.admin_send_command))
    app.add_handler(CommandHandler("backup", admin_handlers.backup_command))
    app.add_handler(MessageHandler(filters.Document.ALL & filters.ChatType.PRIVATE, admin_handlers.restore_command))

    # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND, admin_handlers.admin_message_handler))
    app.add_handler(MessageHandler(filters.ALL & filters.ChatType.GROUP, general_handlers.track_activity))

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
    scheduler = AsyncIOScheduler(timezone=config.TIMEZONE)
    scheduler.add_job(scheduler_tasks.reset_season, 'cron', day=1, hour=0, minute=0, args=[app])
    scheduler.add_job(game_logic.save_season_snapshot, 'cron', day=1, hour=0, minute=1)
    scheduler.add_job(scheduler_tasks.update_points, 'cron', hour='7', minute=59)
    scheduler.add_job(scheduler_tasks.send_daily_task, 'cron', hour=8, minute=0, args=[app])

    scheduler.start()
    logging.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
